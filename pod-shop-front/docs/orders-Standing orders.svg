<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="257.04px" preserveAspectRatio="none" style="width:1016px;height:257px;background:#FFFFFF;" version="1.1" viewBox="0 0 1016 257" width="1016.4px" zoomAndPan="magnify"><defs/><g><rect height="22.2502" style="stroke:#00000000;stroke-width:0.84;fill:none;" width="104.16" x="452.76" y="8.4"/><text fill="#000000" font-family="sans-serif" font-size="11.76" font-weight="bold" lengthAdjust="spacing" textLength="95.76" x="456.96" y="23.9695">Standing orders</text><rect fill="#DDDDDD" height="215.4846" style="stroke:#181818;stroke-width:0.42;" width="661.08" x="21.84" y="36.5302"/><text fill="#000000" font-family="sans-serif" font-size="10.92" font-weight="bold" lengthAdjust="spacing" textLength="105" x="299.88" y="47.0876">in-store-web-app</text><rect fill="#FFFFFF" height="127.8834" style="stroke:#181818;stroke-width:0.84;" width="8.4" x="34.86" y="87.6012"/><rect fill="#FFFFFF" height="11.76" style="stroke:#181818;stroke-width:0.84;" width="8.4" x="778.26" y="127.6029"/><rect fill="#FFFFFF" height="11.76" style="stroke:#181818;stroke-width:0.84;" width="8.4" x="778.26" y="190.2846"/><rect height="50.9217" style="stroke:#000000;stroke-width:1.26;fill:none;" width="811.44" x="16.8" y="95.1612"/><rect height="50.9217" style="stroke:#000000;stroke-width:1.26;fill:none;" width="811.44" x="16.8" y="157.8429"/><line style="stroke:#181818;stroke-width:0.42;fill:none;stroke-dasharray:5.0,5.0;" x1="38.64" x2="38.64" y1="79.2012" y2="223.0446"/><line style="stroke:#181818;stroke-width:0.42;fill:none;stroke-dasharray:5.0,5.0;" x1="433.44" x2="433.44" y1="79.2012" y2="223.0446"/><line style="stroke:#181818;stroke-width:0.42;fill:none;stroke-dasharray:5.0,5.0;" x1="637.56" x2="637.56" y1="79.2012" y2="223.0446"/><line style="stroke:#181818;stroke-width:0.42;fill:none;stroke-dasharray:5.0,5.0;" x1="782.04" x2="782.04" y1="79.2012" y2="223.0446"/><rect fill="#E2E2F0" height="25.6102" rx="2.1" ry="2.1" style="stroke:#181818;stroke-width:0.42;" width="27.72" x="25.2" y="52.751"/><text fill="#000000" font-family="sans-serif" font-size="11.76" lengthAdjust="spacing" textLength="15.96" x="31.08" y="70.0005">UX</text><rect fill="#E2E2F0" height="25.6102" rx="2.1" ry="2.1" style="stroke:#181818;stroke-width:0.42;" width="27.72" x="25.2" y="222.2046"/><text fill="#000000" font-family="sans-serif" font-size="11.76" lengthAdjust="spacing" textLength="15.96" x="31.08" y="239.4541">UX</text><rect fill="#E2E2F0" height="25.6102" rx="2.1" ry="2.1" style="stroke:#181818;stroke-width:0.42;" width="41.16" x="413.28" y="52.751"/><text fill="#000000" font-family="sans-serif" font-size="11.76" lengthAdjust="spacing" textLength="29.4" x="419.16" y="70.0005">Vuex</text><rect fill="#E2E2F0" height="25.6102" rx="2.1" ry="2.1" style="stroke:#181818;stroke-width:0.42;" width="41.16" x="413.28" y="222.2046"/><text fill="#000000" font-family="sans-serif" font-size="11.76" lengthAdjust="spacing" textLength="29.4" x="419.16" y="239.4541">Vuex</text><rect fill="#E2E2F0" height="25.6102" rx="2.1" ry="2.1" style="stroke:#181818;stroke-width:0.42;" width="83.16" x="596.4" y="52.751"/><text fill="#000000" font-family="sans-serif" font-size="11.76" lengthAdjust="spacing" textLength="71.4" x="602.28" y="70.0005">OrderHelper</text><rect fill="#E2E2F0" height="25.6102" rx="2.1" ry="2.1" style="stroke:#181818;stroke-width:0.42;" width="83.16" x="596.4" y="222.2046"/><text fill="#000000" font-family="sans-serif" font-size="11.76" lengthAdjust="spacing" textLength="71.4" x="602.28" y="239.4541">OrderHelper</text><rect fill="#E2E2F0" height="25.6102" rx="2.1" ry="2.1" style="stroke:#181818;stroke-width:0.42;" width="74.76" x="745.08" y="52.751"/><text fill="#000000" font-family="sans-serif" font-size="11.76" lengthAdjust="spacing" textLength="59.64" x="750.96" y="70.0005">od-so-api</text><rect fill="#E2E2F0" height="25.6102" rx="2.1" ry="2.1" style="stroke:#181818;stroke-width:0.42;" width="74.76" x="745.08" y="222.2046"/><text fill="#000000" font-family="sans-serif" font-size="11.76" lengthAdjust="spacing" textLength="59.64" x="750.96" y="239.4541">od-so-api</text><rect fill="#FFFFFF" height="127.8834" style="stroke:#181818;stroke-width:0.84;" width="8.4" x="34.86" y="87.6012"/><rect fill="#FFFFFF" height="11.76" style="stroke:#181818;stroke-width:0.84;" width="8.4" x="778.26" y="127.6029"/><rect fill="#FFFFFF" height="11.76" style="stroke:#181818;stroke-width:0.84;" width="8.4" x="778.26" y="190.2846"/><line style="stroke:#000000;stroke-width:0.84;stroke-dasharray:2.0,2.0;" x1="0" x2="1010.52" y1="88.4412" y2="88.4412"/><path d="M16.8,95.1612 L210,95.1612 L210,101.302 L201.6,109.702 L16.8,109.702 L16.8,95.1612 " fill="#EEEEEE" style="stroke:#000000;stroke-width:1.26;"/><rect fill="none" height="50.9217" style="stroke:#000000;stroke-width:1.26;" width="811.44" x="16.8" y="95.1612"/><text fill="#000000" font-family="sans-serif" font-size="10.92" font-weight="bold" lengthAdjust="spacing" textLength="155.4" x="29.4" y="106.5586">display one time order grid</text><polygon fill="#181818" points="768.18,124.2429,776.58,127.6029,768.18,130.9629,771.54,127.6029" style="stroke:#181818;stroke-width:0.84;"/><line style="stroke:#181818;stroke-width:0.84;" x1="43.26" x2="773.22" y1="127.6029" y2="127.6029"/><text fill="#000000" font-family="sans-serif" font-size="10.92" lengthAdjust="spacing" textLength="295.68" x="49.14" y="123.6195">GET /locations/{locationId}/orders/for_standing_orders</text><polygon fill="#181818" points="52.5,136.0029,44.1,139.3629,52.5,142.7229,49.14,139.3629" style="stroke:#181818;stroke-width:0.84;"/><line style="stroke:#181818;stroke-width:0.84;stroke-dasharray:2.0,2.0;" x1="47.46" x2="781.62" y1="139.3629" y2="139.3629"/><path d="M16.8,157.8429 L94.92,157.8429 L94.92,163.9838 L86.52,172.3838 L16.8,172.3838 L16.8,157.8429 " fill="#EEEEEE" style="stroke:#000000;stroke-width:1.26;"/><rect fill="none" height="50.9217" style="stroke:#000000;stroke-width:1.26;" width="811.44" x="16.8" y="157.8429"/><text fill="#000000" font-family="sans-serif" font-size="10.92" font-weight="bold" lengthAdjust="spacing" textLength="40.32" x="29.4" y="169.2403">update</text><polygon fill="#181818" points="768.18,186.9246,776.58,190.2846,768.18,193.6446,771.54,190.2846" style="stroke:#181818;stroke-width:0.84;"/><line style="stroke:#181818;stroke-width:0.84;" x1="43.26" x2="773.22" y1="190.2846" y2="190.2846"/><text fill="#000000" font-family="sans-serif" font-size="10.92" lengthAdjust="spacing" textLength="253.68" x="49.14" y="186.3012">PUT /locations/{locationId}/standing_orders/v2</text><polygon fill="#181818" points="52.5,198.6846,44.1,202.0446,52.5,205.4046,49.14,202.0446" style="stroke:#181818;stroke-width:0.84;"/><line style="stroke:#181818;stroke-width:0.84;stroke-dasharray:2.0,2.0;" x1="47.46" x2="781.62" y1="202.0446" y2="202.0446"/><!--MD5=[019b9587abbb5bc607f3f521a783d658]
@startuml
!procedure VuexApi($api, $apiLink, $resp, $respLink, $end="Api")
    Vuex -> $end ++: [[$apiLink $api]]
'    TODO how to escape chars in link?
'    return [[$respLink $resp]]
    return $resp
!endprocedure
!procedure LinkIt($text, $link)
    [[$link $text]]
!endprocedure

scale 0.7
    box "in-store-web-app"
    participant UX
    participant Vuex
    participant OrderHelper
    end box
    participant Api as "od-so-api "

    title Ordering Sequences

    == Initialization ==
    activate UX
    UX -> Api ++ : [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#e787aedcaeb446208bbb9f47ec69aed8 GET /users/me]]
    return [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#33f156336f064c3ab30bfff452404f11: UserInfo]]
    UX -> Vuex ++ : $store.dispatch('location/getLocations')

    Vuex -> Api: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#06cc27bea8744e3dbfce148f0dcf62e2 GET /locations]]
    activate Api
'    TODO how to escape chars in link?
    return [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#06cc27bea8744e3dbfce148f0dcf62e2 Array<Locations>]]
    Vuex -> Vuex: commit(locationsList)
    Vuex -> Vuex: LocationState setInitialLocation
    deactivate Vuex
    Vuex -> UX : initial location set

    newpage On location change
    UX ->  Vuex ++ : LocationState setInitialLocation
    group Show Unsaved Modal?
        Vuex ->  OrderHelper ++ : hasNewQtys
        return : true / false
        Vuex -> UX : show UnsavedOrdersModal
        deactivate Vuex
    end

    group Show Payment Failures modal?
        UX -> Vuex ++ : $store.dispatch('accountStatus/getPaymentFailures', encrypted_id)
        VuexApi("GET locations/${encryptedLocationId}/recent_payment_failures", "", "LocationPaymentFailures", "")
        return true / false
        deactivate Vuex
    end
'    return location set


/'
'/


    newpage One Time Orders (loading)
    activate UX
    UX -> Vuex ++ : $store.dispatch('orders/setPageToOrderGrid', \n\t { viewingStandingOrder, encryptedLocationId }\n)

    group Get last update order timestamp [$store.dispatch('orders/getLastUpdatedDateTime', { encryptedLocationId })]
        VuexApi("GET /locations/{locationId}/orders/last_updated", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#343e67dbfe3842fdbcc12c4fe55b6905",  "OrderState SET_LAST_UPDATED timestamap", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#bef8dcffc86a4c348abddf59b7a8594a")
    end

    group Get skus for current location  [$store.dispatch('skus/getSkus', { encryptedLocationId })]
        VuexApi("GET /locations/{locationId}/skus", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#bfbfe5d95b4f4c9abdd2776e40855e54", "SkuState SET_SKUS_PRODUCTS Array<Sku>", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#c8ae870f13d74759b32a08aea196b828")
    end

    Vuex -> Vuex : "OrderState SELECT_DATE setDate"

    group Load Orders [$store.dispatch('getOrders', { encryptedLocationId })]
        VuexApi("GET /locations/{locationId}/orders?start_date=YYYY-MM-DD", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#c7da1cdbc409434cab8dd3945f7111b4", "OrderState SET_ORDERS Array<Orders>", "")
    end
    deactivate Vuex

    newpage Review Order

    UX -> Vuex ++ : $store.dispatch('orders/mkInputPropsMapForWeeksOfOrdersOnHand')
    return InputProps


    group isRequestingMoreItems ?
        UX -> Vuex ++ : startOutOfStockFlow
        Vuex -> Api ++: LinkIt("POST /locations/{locationId}/oos/check", "https://www.notion.so/odeko/243e2d40ebb24ffc87f72b0ad169bc11?v=2249b95c7fdf45a2bda4136560ee6576&p=2f17504231bd474da1e6ab6bfcccf55d")

        alt#Gold #LightBlue Successful case
            Api -> Vuex : OOS_items.length === 0
            Vuex -> UX: go to order review
            deactivate Vuex
        else #Pink Failure:
            Api -> Vuex : OOS items.length > 0
            deactivate Api
            activate Vuex
            Vuex -> UX ++ : show OOS Modal
            deactivate Vuex
            UX -> UX : todo for OOS rec
            deactivate UX
        end
    end

    newpage Update Order
    group Update Order
        activate Api
        UX -> Vuex: Update Order
        deactivate UX
        activate Vuex
        VuexApi("PUT /locations/{locationId}/orders", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#14df1b158feb4a178dc234d225e70dbc", "UpsertOrdersResponse", "")
        Vuex -> UX ++ : UpsertOrdersResponse
        deactivate Vuex

        group $store.dispatch('orders/onUpdateOrder', response)
            UX -> Vuex ++ : $store.dispatch('orders/onUpdateOrder', response)
            Vuex -> Vuex: $store.dispatch('orders/resetPage')

            group Get skus for current location  [$store.dispatch('skus/getSkus', { encryptedLocationId })]
                VuexApi("GET /locations/{locationId}/skus", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#bfbfe5d95b4f4c9abdd2776e40855e54", "SkuState SET_SKUS_PRODUCTS Array<Sku>", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#c8ae870f13d74759b32a08aea196b828")
            end

            group Load Orders [$store.dispatch('orders/getOrders')]
                VuexApi("GET /locations/{locationId}/orders?start_date=YYYY-MM-DD", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#c7da1cdbc409434cab8dd3945f7111b4", "OrderState SET_ORDERS Array<Orders>", "")
            end
            return
        end

        alt#Gold current location has Orders
            UX -> Vuex : $store.commit('location/SET_CURRENT_LOCATION', {\n ...this.currentLocation, has_orders: true \n})
            note right: this should be in the action
        end

        UX -> UX : go to Order Confirmation
    end



    newpage Standing orders
    group display one time order grid
        UX -> Api: GET /locations/{locationId}/orders/for_standing_orders
        activate Api
        return
    end
    group update
        UX -> Api: PUT /locations/{locationId}/standing_orders/v2
        activate Api
        return
    end

@enduml

@startuml

scale 0.7
    box "in-store-web-app"
    participant UX
    participant Vuex
    participant OrderHelper
    end box
    participant Api as "od-so-api "

    title Ordering Sequences

    == Initialization ==
    activate UX
    UX -> Api ++ : [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#e787aedcaeb446208bbb9f47ec69aed8 GET /users/me]]
    return [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#33f156336f064c3ab30bfff452404f11: UserInfo]]
    UX -> Vuex ++ : $store.dispatch('location/getLocations')

    Vuex -> Api: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#06cc27bea8744e3dbfce148f0dcf62e2 GET /locations]]
    activate Api
    return [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#06cc27bea8744e3dbfce148f0dcf62e2 Array<Locations>]]
    Vuex -> Vuex: commit(locationsList)
    Vuex -> Vuex: LocationState setInitialLocation
    deactivate Vuex
    Vuex -> UX : initial location set

    newpage On location change
    UX ->  Vuex ++ : LocationState setInitialLocation
    group Show Unsaved Modal?
        Vuex ->  OrderHelper ++ : hasNewQtys
        return : true / false
        Vuex -> UX : show UnsavedOrdersModal
        deactivate Vuex
    end

    group Show Payment Failures modal?
        UX -> Vuex ++ : $store.dispatch('accountStatus/getPaymentFailures', encrypted_id)
            Vuex -> Api ++: [[ GET locations/${encryptedLocationId}/recent_payment_failures]]
    return LocationPaymentFailures
        return true / false
        deactivate Vuex
    end




    newpage One Time Orders (loading)
    activate UX
    UX -> Vuex ++ : $store.dispatch('orders/setPageToOrderGrid', \n\t { viewingStandingOrder, encryptedLocationId }\n)

    group Get last update order timestamp [$store.dispatch('orders/getLastUpdatedDateTime', { encryptedLocationId })]
            Vuex -> Api ++: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#343e67dbfe3842fdbcc12c4fe55b6905 GET /locations/{locationId}/orders/last_updated]]
    return OrderState SET_LAST_UPDATED timestamap
    end

    group Get skus for current location  [$store.dispatch('skus/getSkus', { encryptedLocationId })]
            Vuex -> Api ++: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#bfbfe5d95b4f4c9abdd2776e40855e54 GET /locations/{locationId}/skus]]
    return SkuState SET_SKUS_PRODUCTS Array<Sku>
    end

    Vuex -> Vuex : "OrderState SELECT_DATE setDate"

    group Load Orders [$store.dispatch('getOrders', { encryptedLocationId })]
            Vuex -> Api ++: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#c7da1cdbc409434cab8dd3945f7111b4 GET /locations/{locationId}/orders?start_date=YYYY-MM-DD]]
    return OrderState SET_ORDERS Array<Orders>
    end
    deactivate Vuex

    newpage Review Order

    UX -> Vuex ++ : $store.dispatch('orders/mkInputPropsMapForWeeksOfOrdersOnHand')
    return InputProps


    group isRequestingMoreItems ?
        UX -> Vuex ++ : startOutOfStockFlow
        Vuex -> Api ++:     [[https://www.notion.so/odeko/243e2d40ebb24ffc87f72b0ad169bc11?v=2249b95c7fdf45a2bda4136560ee6576&p=2f17504231bd474da1e6ab6bfcccf55d POST /locations/{locationId}/oos/check]]

        alt#Gold #LightBlue Successful case
            Api -> Vuex : OOS_items.length === 0
            Vuex -> UX: go to order review
            deactivate Vuex
        else #Pink Failure:
            Api -> Vuex : OOS items.length > 0
            deactivate Api
            activate Vuex
            Vuex -> UX ++ : show OOS Modal
            deactivate Vuex
            UX -> UX : todo for OOS rec
            deactivate UX
        end
    end

    newpage Update Order
    group Update Order
        activate Api
        UX -> Vuex: Update Order
        deactivate UX
        activate Vuex
            Vuex -> Api ++: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#14df1b158feb4a178dc234d225e70dbc PUT /locations/{locationId}/orders]]
    return UpsertOrdersResponse
        Vuex -> UX ++ : UpsertOrdersResponse
        deactivate Vuex

        group $store.dispatch('orders/onUpdateOrder', response)
            UX -> Vuex ++ : $store.dispatch('orders/onUpdateOrder', response)
            Vuex -> Vuex: $store.dispatch('orders/resetPage')

            group Get skus for current location  [$store.dispatch('skus/getSkus', { encryptedLocationId })]
                    Vuex -> Api ++: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#bfbfe5d95b4f4c9abdd2776e40855e54 GET /locations/{locationId}/skus]]
    return SkuState SET_SKUS_PRODUCTS Array<Sku>
            end

            group Load Orders [$store.dispatch('orders/getOrders')]
                    Vuex -> Api ++: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#c7da1cdbc409434cab8dd3945f7111b4 GET /locations/{locationId}/orders?start_date=YYYY-MM-DD]]
    return OrderState SET_ORDERS Array<Orders>
            end
            return
        end

        alt#Gold current location has Orders
            UX -> Vuex : $store.commit('location/SET_CURRENT_LOCATION', {\n ...this.currentLocation, has_orders: true \n})
            note right: this should be in the action
        end

        UX -> UX : go to Order Confirmation
    end



    newpage Standing orders
    group display one time order grid
        UX -> Api: GET /locations/{locationId}/orders/for_standing_orders
        activate Api
        return
    end
    group update
        UX -> Api: PUT /locations/{locationId}/standing_orders/v2
        activate Api
        return
    end

@enduml

PlantUML version 1.2022.5(Sat Apr 30 06:55:52 EDT 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>