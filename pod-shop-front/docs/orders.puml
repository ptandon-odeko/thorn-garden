@startuml
!procedure VuexApi($api, $apiLink, $resp, $respLink)
    Vuex -> Api: [[$apiLink $api]]
    activate Api
'    TODO how to escape chars in link?
'    return [[$respLink $resp]]
    return $resp
!endprocedure
!procedure LinkIt($text, $link)
    [[$link $text]]
!endprocedure

scale 0.7
    box "in-store-web-app"
    participant UX
    participant Vuex
    participant OrderHelper
    end box
    participant Api as "od-so-api "

    title Ordering Sequences
    == Initialization ==
    activate UX
    UX -> Api ++ : [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#e787aedcaeb446208bbb9f47ec69aed8 GET /users/me]]
    return [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#33f156336f064c3ab30bfff452404f11: UserInfo]]
    UX -> Vuex ++ : $store.dispatch('location/getLocations')

    Vuex -> Api: [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#06cc27bea8744e3dbfce148f0dcf62e2 GET /locations]]
    activate Api
'    TODO how to escape chars in link?
    return [[https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#06cc27bea8744e3dbfce148f0dcf62e2 Array<Locations>]]
    Vuex -> Vuex: commit(locationsList)
    Vuex -> Vuex: LocationState setInitialLocation
    deactivate Vuex
    Vuex -> UX : initial location set



    == On location change ==
    UX ->  Vuex ++ : LocationState setInitialLocation
    group Show Unsaved Modal?
    Vuex ->  OrderHelper ++ : hasNewQtys
    return : true / false
    Vuex -> UX : show UnsavedOrdersModal
    deactivate Vuex
    end

    group Show Payment Failures modal?
    UX -> Vuex ++ : $store.dispatch('accountStatus/getPaymentFailures', encrypted_id)
    VuexApi("GET locations/${encryptedLocationId}/recent_payment_failures", "", "LocationPaymentFailures", "")
    return true / false
    deactivate Vuex
    end
'    return location set


/'
'/



    == One Time Orders ==
    activate UX
    UX -> Vuex ++ : $store.dispatch('orders/setPageToOrderGrid', \n\t { viewingStandingOrder, encryptedLocationId }\n)

    group Get last update order timestamp [$store.dispatch('orders/getLastUpdatedDateTime', { encryptedLocationId })]
    VuexApi("GET /locations/{locationId}/orders/last_updated", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#343e67dbfe3842fdbcc12c4fe55b6905",  "OrderState SET_LAST_UPDATED timestamap", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#bef8dcffc86a4c348abddf59b7a8594a")
    end

    group Get skus for current location  [$store.dispatch('skus/getSkus', { encryptedLocationId })]
    VuexApi("GET /locations/{locationId}/skus", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#bfbfe5d95b4f4c9abdd2776e40855e54", "SkuState SET_SKUS_PRODUCTS Array<Sku>", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#c8ae870f13d74759b32a08aea196b828")
    end

    Vuex -> Vuex : "OrderState SELECT_DATE setDate"

    group Load Orders [$store.dispatch('getOrders', { encryptedLocationId })]
    VuexApi("GET /locations/{locationId}/orders?start_date=YYYY-MM-DD", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#c7da1cdbc409434cab8dd3945f7111b4", "OrderState SET_ORDERS Array<Orders>", "")
    end
    deactivate Vuex

    == Review Order ==
    UX -> Vuex ++ : $store.dispatch('orders/mkInputPropsMapForWeeksOfOrdersOnHand')
    return InputProps

    alt isRequestingMoreItems ?
        Vuex -> Api ++: LinkIt("POST /locations/{locationId}/oos/check", "https://www.notion.so/odeko/243e2d40ebb24ffc87f72b0ad169bc11?v=2249b95c7fdf45a2bda4136560ee6576&p=2f17504231bd474da1e6ab6bfcccf55d")
        alt#Gold #LightBlue Successful case
            Api -> Vuex : OOS_items.length === 0
            activate Vuex
            Vuex -> UX: go to order review
            deactivate Vuex
        else #Pink Failure:
            Api -> Vuex : OOS items.length > 0
            deactivate Api
            activate Vuex
            Vuex -> UX ++ : show OOS Modal
            deactivate Vuex
            UX -> UX : todo for OOS rec
            deactivate UX
        end
    end

    == Update Order ==
    group Update Order
        activate Api
        UX -> Vuex: Update Order
        deactivate UX
        activate Vuex
        VuexApi("PUT /locations/{locationId}/orders", "https://www.notion.so/odeko/SO-API-api-docs-2f17504231bd474da1e6ab6bfcccf55d#14df1b158feb4a178dc234d225e70dbc", "UpsertOrdersResponse", "")
        Vuex -> UX ++ : UpsertOrdersResponse

        group $store.dispatch('orders/onUpdateOrder', response)
            UX -> Vuex: $store.dispatch('orders/onUpdateOrder', response)
            deactivate UX
            Vuex -> Vuex: $store.dispatch('orders/resetPage')
            Vuex -> Vuex: $store.dispatch('skus/getSkus')
            Vuex -> Vuex: $store.dispatch('orders/getOrders')
            return
            activate UX
        end

        alt#Gold current location has Orders
            UX -> Vuex : $store.commit('location/SET_CURRENT_LOCATION', {\n ...this.currentLocation, has_orders: true \n})
            note right: this should be in the action
        end

        UX -> UX : go to Order Confirmation
    end
'
'
'
'    == Standing orders ==
'    group display one time order grid
'        UX -> Api: GET /locations/{locationId}/orders/for_standing_orders
'        activate Api
'        return
'    end
'    group update
'        UX -> Api: PUT /locations/{locationId}/standing_orders/v2
'        activate Api
'        return
'    end

@enduml
